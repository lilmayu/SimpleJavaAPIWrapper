plugins {
    id 'java'
    id 'io.codearte.nexus-staging' version '0.11.0'
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group 'dev.mayuna'
version '1.0.1.1'

repositories {
    mavenCentral()
}

dependencies {
    // GSON
    compileOnly 'com.google.code.gson:gson:2.9.0'
    testImplementation 'com.google.code.gson:gson:2.9.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    // JUnit
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
}

task compileLibrary(type: Jar) {
    from { configurations.compile.findAll { !it.name.endsWith('pom') }.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

test {
    useJUnit();
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'simple-java-api-wrapper'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Framework for easier API wrapping made in Java'
                url 'https://mayuna.dev/'

                scm {
                    connection 'scm:https://github.com/lilmayu/SimpleJavaAPIWrapper'
                    developerConnection 'scm:git:https://github.com/lilmayu/SimpleJavaAPIWrapper.git'
                    url 'https://github.com/lilmayu/SimpleJavaAPIWrapper'
                }

                licenses {
                    license {
                        name 'Apache License 2.0'
                        url 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                developers {
                    developer {
                        id 'mayuna'
                        name 'Marek Lof'
                        email 'uwulilmayu@gmail.com'
                    }
                }
            }
        }
    }
}

nexusStaging {
    packageGroup = "dev.mayuna" //optional if packageGroup == project.getGroup()
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

compileLibrary.dependsOn test
compileLibrary.dependsOn javadocJar
compileLibrary.dependsOn sourcesJar
